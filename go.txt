一.go基础
  1.go源文件以go为扩展名
  2.go应用程序的执行入口是main()函数
  3.go严格区分大小写
  4.go语言,每个语句后不需要分号,go语言会在每行后自动加分号
  5.go是一行一行进行编译的
  6.go语言定义的变量或者import的包如果没有使用到,代码便能通过编译
  7.大括号必须成对出现

编译文件  go build hello.go
运行文件  go run hello.go / hello.exe


转义字符
\t  \r  \n \\ \"

格式化
gofmt hello.go
gofmt -w hello.go  //把格式化后的内容输入到hello.go文件中

命令行--》操作dos操作系统--》dos操作系统操作windows

cd /d f:   cd到d盘
cd \       cd到当前盘符的根
md joy     创建一个目录
rd joy     删除目录
rd /q/s  joy  不带询问
rd /s         带询问
d:\test\abc.txt  创建abc.txt
echo hello > abc.txt  追加内容
copy abc.txt d:\test   复制文件
copy abc.txt d:\test\ok.txt   复制文件,并修改名字
move abc.txt f:\   移动文件
del abc.tx  删除文件
cls    清屏


变量使用的三种方式
 1.var i int //此时输出i=0,默认值为0
 2.var num = 11.2  //根据值自行判定变量类型
 3.name := "joy"  :=左侧的变量不应该已经申明过的
 4.多变量声明
   a, name, b := 100, "tom", 888
 5.一次声明多个全局变量(在go函数外部定义变量就是全局变量)
   var (
	n1 = 200
	n2 = 300
	name = "joy"
)
 6.变量=变量名+值+数据类型

声明变量-->初始化变量-->赋值

+ 两边都是数字做加法
  做字符串的拼接

数据类型: 基本数据类型            +           复杂数据类型
      数值型+字符型+布尔型+字符串     指针+数组+结构体+管道+函数+切片+接口+map
    整数+浮点+复数


查看变量的数据类型 fmt.Printf("%T", i)
查看变量占用字节大小和数据类型  fmt.Printf("%T %d", i, unsafe.Sizeof(i))


导入多个包习惯用
import (
    "fmt"
    "unsafe"
)


浮点数会有精度损失, float64比float32的要准确


go存储单个字符(字母),使用byte来保存
go的字符串是由字节组成的

var c1 byte = "0"
var c2 byte = "a"
var c3 byte = "北"
fmt.Println(c1) //45
fmt.Println(c2) //97
fmt.Println(c3) //无法输出,已经超出范围

不需要转换而直接输出"0", "a", "北"
fmt.Printf("%c %c %c", c1, c2, c3)

var c4 int = 22269
fmt.Printf("%c", c4) // "国"


bool   true  false  
var a bool = false   //占一个字节

go语言同一使用utf-8编码


字符串的两种表现形式
1.双引号,会识别转义字符
2.反引号,以字符串的原生形式输出,包括换行和特殊字符


只声明不赋值默认值为
整数    0
浮点    0
字符串  ""
布尔类型 false


var n int32 = 100
var f float64 = float64(n)


将其他基本类型转换为字符串
var str string = fmt.Sprintf("%d", num1)
var str string = fmt.Sprintf("%f", f1)
var str string = fmt.Sprintf("%t", bool)
var str string = fmt.Sprintf("%c", byte)


将字符串转换为其他类型
var str string = "false"
var b bool
b, _ = strconv.ParseBool(str)

var str string = "123456"
var num int64
num, _ = strconv.ParseInt(str, 10, 64)


获取变量的地址  &num

var num int32 = 100
var ptr *int32 = &num
获取指针指向的值 *ptr


go的值类型都有对应的指针类型 形式为*数据类型

值类型包括:int float bool string 数组 结构体
引用类型:指针 slice切片 map 管道chan interface

值类型:变量直接存储值,内存通常在栈中分配
引用类型:变量存储的是一个地址, 这个地址对应的空间才真正存储数据,内存通常在堆上分配, 当没有
         变量引用这个地址时, 该地址对应的数据空间就成为一个垃圾,由GC来回收


命名采用驼峰发法
如果首字母大写,可以被其他的包访问,如果首字母小写,只能在本包中使用

运算符 /  不会有小数得到的是整数相当于python的//


另种输入方式
var name string
fmt.Printf("%s", "请输入姓名")
fmt.Scanln(&name)

var age int32
fmt.Printf("%d", 请输入年龄)
fmt.Scanf("%s %d", &name, &age)


二进制的原码 反码 补码
二进制的最高位是符号位:0表示正数 1负数
正数的原码 反码 补码都一样
负数的反码=它的原码符号位不变,其他位取反
负数的补码=它的反码+1
0的反码,补码都是0
在计算机运算的时候,都是以补码的方式来运算的


switch/case后是一个表达式(常量,变量,一个带有返回值的函数)
case后的各个表达式的值的数据类型,必须和switch的表达式数据一致
case后面可以带多个表达式,使用逗号隔开
case后面不需要带break,程序匹配到case就会执行代码段然后退出



for循环
1.
  for i := 1; i <= 10; i++ {
	fmt.Println("hello, world")
  }

2.
  j := 1
  for j <= 10 {
	fmt.Println("hello, world")
	j ++
  }

3.
  j := 1
  for {
	 if j <= 10 {
	 fmt.Println("hello, world")
	 } else {
		 break
	 }
	 j ++
  }

4.
  var str string = "中国是一个大国家"
  for index, val := range str {
	fmt.Printf("%c  %d\n", val, index) //中0  国3
  }

5.
  var str string = "中国是一个大国家"
  str1 := []rune(str)
  for index, val := range str1 {
	fmt.Printf("%c  %d\n", val, index)  //中0 国1
  }

6.
  var str string = "中国是一个大国家"
  for index, val := range str {
	fmt.Println(val, index)  //20013 0  22269 3
  }

4 5 6还是有区别的 有中文和英文的时候用5先进行转换,只有英文和数字采用4 5 6均可



生成随机数
rand.Seed(time.Now().Unix())
n := rand.Intn(100) + 1


break语句出现在多层嵌套语句块中时,可以通过标签指明要终止的是哪一层语句块



goto label1
label1:
fmt.Println("goto后的语句")


return在普通函数中, 表示跳出该函数,不再执行函数
return在main函数中, 表示终止main程序, 也就是终止程序


函数的基本语法
func 函数名(形参列表)(返回值列表){函数体}



函数的调用机制
1.在调用一个函数时, 会给函数分配一个新的空间, 编译器会通过自身的处理让这个新的空间和其他的栈的空间区分开来
2.在每个函数对应的栈中，数据空间是独立的,不会混淆
3.当一个函数调用完毕,程序会销毁这个函数对应的栈空间


go函数支持返回多个值
如果返回多个值,在接收时,希望忽略某个返回值,则使用_符号表示占位忽略
如果返回值只有一个,可以不写()


函数在传参的时候 基本数据类型和数组默认都是值传递的,即进行值拷贝,在函数内修改,不会影响原来的值
如果希望函数内的变量能修改函数外的变量,可以传入变量的地址&num,函数内以指针的方式操作变量，该方式操作的是按值传递的数据类型,即数组和基本数据类型


go函数不允许重载:即函数名相同,形参个数不同


为了简化数据类型定义,自定义数据类型
基本语法:type 自定义数据类型名 数据类型  //相当于一个别名
	 type myInt int
	 type mySum func(int, int) int


return的值可以写成下面这种
func myCal (num1 int32, num2 int32) (sum int32, sub int32) {
	sum = num1 + num2
	sub = num1 - num2
	return
}

可以使用_忽略返回值


每一个源文件都可以包含一个__init__函数,该函数会在main函数执行前,被go调用


如果一个文件同时包含全局变量定义,init函数和main函数,则执行的流程  全局变量定义-->init-->函数-->main函数



匿名函数自调两种方式  
func () {} ()    
a := func () {}  a()


strings.HasSuffix(name,".jpg") //存在返回true 不存在返回false


defer的作用:在函数执行完毕后,及时的释放资源
defer fmt.Println("hello")
当程序执行到defer时,暂时不执行,会将defer后面的语句压入到独立的defer栈,
当函数执行完毕后,再从defer栈,按照先入后出的出栈,执行
在入栈的时候也会把相关的值拷贝入栈
func test(){
	file = openfile()
	defer file.close()
	//其他代码
}


两种传递方式
  1.值传递
  2.引用传递
不管是值传递还是引用传递,传递给函数的都是变量的副本,不同的是,值传递的是值
的拷贝,引用传递的是地址的拷贝



字符串的API
1.字符串的长度  len([]rune(str))
2.字符串遍历,同时处理有中文的问题  r := []rune(str)
3.字符串转整数  n, err = strconv.Atoi("hello")  ell == nil 转换成功
4.整数转字符串   str = strconv.Itoa(123456)
5.字符串转byte   var bytes = []byte("hello go")
6.byte转字符串   str = string([]byte{97, 98, 99})
7.10进制转2 8 16  str = strconv.FormatInt(123, 16)
8.查找子串是否在指定的字符串中  strings.Contains("seafood", "sea",)
9.统计指定子串出现的次数    strings.Count("helloll", "ll")
10.不区分大小写   strings.EqualFold("abc", "ABc")
11.返回第一次出现的索引   strings.Index("hello world", "o") //没有返回-1
12.返回最后一次出现的索引   strings.LastIndex("hello world", "o")  //没有返回-1
13.替换子串    strings.Replace("hello world", "l", "L", 2)
14.按照指定的标记拆分为字符串数组 strings.Split("hello,world,china", ",")
15.将字符串的字母进行大小写的转换  strings.ToLower("go")   strings.ToUpper("go")
16.去掉字符串左右两边指定的字符   strings.Trim("!hello !", "!")
   去掉字符串左边指定的字符       strings.TrimLeft("!hello !", "!")
   去掉字符串右边指定的字符       strings.TrimRight("!hello !", "!")
17.判断字符串是否以指定的字符串开头  strings.HasPrefix("https://www.baidu.com", "http")
   判断字符串是否以指定的字符串结尾  strings.HasSuffix("https://www.baidu.com", "http")


时间日期函数  类型时time.Time
1.获取当前时间    now := time.Now()
2.获取具体的年月日   
		  now.Year()
	  	  now.Month()
		  now.Day()
		  now.Hour()
		  now.Minute()
		  now.Second()
		  now.Weekday()
3.格式化时间
  1. fmt.Printf("%d-%d-%d",now.Year(), now.Month(), now.Day())
  2. dateStr := Sprintf("%d-%d-%d",now.Year(), now.Month(), now.Day())
     fmt.Printf("%v", dateStr)
  3.time.Format()
    fmt.Println(now.Format("2006-01-02 15:04:05"))
    fmt.Println(now.Format("2006/01/02 15:04:05"))
    数字必须是"2006/01/02 15:04:05",不能是其他的
  4.延迟
    time.Sleep(1)
  5.时间戳
    now.Unix()
    now.UnixNano()


内建函数
  1. len
  2. new  用来分配内存,主要用来分配值类型,返回的是指针
     num2 := new(int)  //*int
     new(int) 创建了一个指针,该指针指向一个刚创建的内存地址
  3. make 用来分配内存,主要用来分配引用类型   channel map slice


异常处理
  在要出错的函数首句加上
  defer func() {
	// err := recover()
	if err := recover(); err != nil {
		fmt.Println(err)
	}
  }()
  自定义错误
  func readConf(name string) (err error) {
	if name == "config.ini" {
		return nil
	} else {
		return errors.New("读取文件错误")
	}
  }
  if err != nil {
		panic(err)
	}
  fmt.Println("over")




数组与切片
1.数组可以存放多个同一类型数据,数组也是一种数据类型,在go中,数组是值类型
2.数组的定义
  1. var 数组名 [数组大小]int
     var arr [5]int
  2.数组的注意
    var intarr [5]int
    数组的地址是 &intarr
    数组的第一个元素的地址,就是数组的首地址
    数组的各个元素的地址间隔是依据数组的类型决定int64 int32
  3.初始化一个数组
    1. var numarr [2]int
       numarr[0] = 10
       numarr[1] = 20
    2. var numarr [3]int = [3]int{1, 2, 3}
    3. var numarr = [3]int{1, 2, 3}
    4. var numarr = [...]int{1, 2, 3}
    5. var numarr = [...]int{0: 1, 1: 2, 2: 3}
    6. var numarr := [...]string{0: "tom", 1: "jack", 2: "lulu"}

3.遍历数组
  1.常规遍历
  2. for index, value := range intarr {}
     for _, value := range intarr {}      //不想使用index

4.创建一个数组的默认值 int-->0    string-->""   bool-->false  float32-->0

5.数组的数据类型必须一致,数组一旦创建长度固定,不能动态修改

6.数组是基本类型,按值传递,即复制了一份,如果想要修改,则传递指针作为实参即可
  var arrint [3]int
  func change(ptr *[3]int) {
	(*ptr)[0] = 10
  }
  change(&arrint) 
  fmt.Println(arrint) //此时数组的值已经发生改变

生成随机数 
  rand.Seed(time.Now().UnixNano())
  res10 := rand.Intn(100)   //生成0-99的随机整数



切片:切片是数组的一个引用,因此切片是引用类型,切片是一个动态变化数组
定义切片: var 切片名 []类型
1. slice的确是一个引用类型
2.slice从底层来说,其实是一个数据结构(struct结构体)
  type slice struct {
      ptr *[2]int
      len int
      cap int
  }
3.切片的创建
  1. var arrint = [...]int{1, 2, 3, 4, 5}
     var slice = arrint[1:3]
  2. var slice []int = make([]int, 4, 10)
     //make([]type, len, cap)
比较: num := new(int)     创建出来的是一个指针
      make([]int, 5, 10)  创建出来的是一个切片
  3. var slice []string = []string{"tom", "jack", "lulu"}

4.append内置函数,对切片进行动态追加
  var slice []int = []int{1, 2, 3}
  slice = append(slice, 4, 5) //必须要用slice接收
  注意:append操作的本质:go底层会创建一个新的数组newArr,将slice原来包含的元素拷贝到新的数组newArr
       slice重新引用到newArr

5.切片的拷贝 copy(改变的切片, 被拷贝的切片)  拷贝只针对切片
  拷贝前后两个切片的数据空间是独立的,互不影响


string和slice
string底层是一个byte数组,他也可以进行切片

修改字符串的值:
arr := []byte("hello")
arr[0] = 'b'
str := string(arr1)

arr := []rune("中国")
arr[0] = "重"
str := string(arr)



二维数组
1.初始化一个二维数组
  var 数组名 [大小][大小]类型 = [大小][大小]类型{{},{}...}
  var arr[2][3]int
  var 数组名 [大小][大小]类型 = [...][大小]类型{{},{}...}


map 是key-value数据结构,称为字段或者关联数组
key 通常为int string
1.声明一个map
  1.
  var dic map[string]int
  dic = make(map[string]int, 10) //需要指定size的大小,如果不指定默认为0
  dic[0] = "tom"
  声明是不会分配内存的,初始化需要make,分配内存后才能赋值和使用
  2.
  dic := make(map[string]int, 10)
  dic[0] = "tom"
  3.
  dic := map[string]string{"hero1": "joy", "hero2": "tom", "hero2": "lulu"}
  dic["hero4"] = "cat"
2.
  delete(dic, "hero1")//如果Key存在则删除,不存在,不操作也不会报错
  如果希望一次性删除所有的key
  1.遍历所有的key,逐一删除
  2.cities = make(map[string]string)
3.
  val, ok := cities["no2"]
  ok是false true


面向对象
结构体-->类
结构体变量-->实例/对象

声明一个结构体
type Student struct {
   name string //属性/字段
   age int
   score float32 
}

-*-结构体是值类型

指针,slice,map的零值都是nil,即还没有分配空间


创建结构体变量
  1. var person Person
     person.name = "tom"
     person.age = 23
  2. var person Person = Person{"joy", 20}
  3. var person *Person = new(Person)
     (*person).name = "tom"
     (*person).age = 23
  4. var person *Person = &Person{}
     (*person).name = "tom"
     (*person).age = 23













































































































